{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","React","createElement","className","content","onClick","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","_slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","_objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","value","onChange","console","log","target","type","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5415165d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n  ? 'make not important' : 'make important'\n  return <li className='note'>\n    {note.content}\n    <button onClick={toggleImportance}>{label}</button>\n  </li>\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response =>{\n    return response.data\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = ( props ) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  useEffect(() => {\n    noteService      \n    .getAll()      \n    .then(initialNotes => {        \n      setNotes(initialNotes)\n    })\n  }, [])\n  \n  const toggleImportanceOf = (id) => {    \n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService      \n    .update(id, changedNote)      \n    .then(returnedNote => {        \n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })  \n    .catch(error => {      \n      setErrorMessage(          \n        `Note '${note.content}' was already removed from server`        \n        )        \n        setTimeout(() => {          \n          setErrorMessage(null)        \n        }, 5000)    \n        setNotes(notes.filter(n => n.id !== id))    \n    })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    }\n    noteService      \n      .create(noteObject)      \n      .then(returnedNote => {        \n        setNotes(notes.concat(returnedNote))     \n        setNewNote('')      \n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n  const notesToShow = showAll\n    ? notes    \n    : notes.filter(note => note.important === true)\n  \n    return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>          \n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => (\n          <Note \n          key={note.id} \n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)} \n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n        value={newNote}\n        onChange={handleNoteChange} \n        />\n        <button type=\"submit\">save</button>\n      </form>  \n      <Footer />\n    </div>\n    \n  )\n}\n\n\nexport default App","import React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\n\nconst rootElement = document.getElementById('root');\nconst root = createRoot(rootElement);\n\n\nroot.render(\n  <App />,\n)\n\n"],"sourceRoot":""}